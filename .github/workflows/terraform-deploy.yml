name: 'Terraform Deploy'

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

# Update permissions block to remove unnecessary permissions
permissions:
  contents: read
  actions: read
  id-token: write
  pull-requests: write

env:
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  TF_VAR_vm_ssh_public_key: ${{ secrets.TF_VAR_VM_SSH_PUBLIC_KEY }}
  STATE_SA: ${{ secrets.STATE_SA }}
  STATE_CONTAINER: ${{ secrets.STATE_CONTAINER }}
  STATE_KEY: ${{ secrets.STATE_KEY }}
  STATE_RG: ${{ secrets.STATE_RG }}

jobs:
  verify-credentials:
    name: 'Verify Azure Credentials'
    runs-on: ubuntu-latest
    steps:
      - name: Verify Azure Environment Variables
        run: |
          if [ -n "$ARM_CLIENT_ID" ]; then
            echo "ARM_CLIENT_ID exists and is set"
            echo "First 4 characters: ${ARM_CLIENT_ID:0:4}..."
          else
            echo "ARM_CLIENT_ID is not set! ❌"
          fi
          
          if [ -n "$ARM_CLIENT_SECRET" ]; then
            echo "ARM_CLIENT_SECRET exists and is set (value masked)"
          else
            echo "ARM_CLIENT_SECRET is not set! ❌"
          fi
          
          if [ -n "$ARM_SUBSCRIPTION_ID" ]; then
            echo "ARM_SUBSCRIPTION_ID exists and is set"
            echo "Value with middle masked: ${ARM_SUBSCRIPTION_ID:0:4}...${ARM_SUBSCRIPTION_ID: -4}"
          else
            echo "ARM_SUBSCRIPTION_ID is not set! ❌"
          fi
          
          if [ -n "$ARM_TENANT_ID" ]; then
            echo "ARM_TENANT_ID exists and is set"
            echo "Value with middle masked: ${ARM_TENANT_ID:0:4}...${ARM_TENANT_ID: -4}"
          else
            echo "ARM_TENANT_ID is not set! ❌"
          fi

  validate:
    name: 'Validate Terraform'
    needs: verify-credentials
    runs-on: ubuntu-latest
    
    # Use the Bash shell
    defaults:
      run:
        shell: bash
        working-directory: ./terraform/environments/prod

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.7"

      - name: Terraform Format
        id: fmt
        run: |
          # First format all files
          terraform fmt -recursive
          # Then check if any files would still need formatting
          terraform fmt -check -recursive
        continue-on-error: true

      - name: Terraform Validate
        id: validate
        run: |
          terraform init -backend=false
          terraform validate -no-color

  plan:
    name: 'Plan Terraform Changes'
    needs: validate
    runs-on: ubuntu-latest
    environment: production
    
    defaults:
      run:
        shell: bash
        working-directory: ./terraform/environments/prod

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.7"

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: |
            {
              "clientId": "${{ secrets.AZURE_CLIENT_ID }}",
              "clientSecret": "${{ secrets.AZURE_CLIENT_SECRET }}",
              "subscriptionId": "${{ secrets.AZURE_SUBSCRIPTION_ID }}",
              "tenantId": "${{ secrets.AZURE_TENANT_ID }}"
            }

      - name: Create Azure Storage for Terraform State
        run: |
          # Create resource group if it doesn't exist
          echo "Creating resource group $STATE_RG if it doesn't exist..."
          az group create \
            --name "$STATE_RG" \
            --location "swedencentral" \
            --tags Environment=Production Service=Terraform team=Platform

          # Format storage account name to meet Azure requirements
          # Convert to lowercase, remove special characters, limit to 24 chars
          STORAGE_ACCOUNT_NAME=$(echo "$STATE_SA" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]//g' | cut -c1-24)
          echo "Using storage account name: $STORAGE_ACCOUNT_NAME"

          # Validate storage account name
          if [[ ! $STORAGE_ACCOUNT_NAME =~ ^[a-z0-9]{3,24}$ ]]; then
            echo "Error: Storage account name must be between 3 and 24 characters and contain only lowercase letters and numbers"
            exit 1
          fi

          # Create storage account if it doesn't exist
          echo "Creating storage account $STORAGE_ACCOUNT_NAME if it doesn't exist..."
          az storage account create \
            --name "$STORAGE_ACCOUNT_NAME" \
            --resource-group "$STATE_RG" \
            --location "swedencentral" \
            --sku "Standard_LRS" \
            --encryption-services blob \
            --min-tls-version "TLS1_2" \
            --allow-blob-public-access false

          # Create container if it doesn't exist
          echo "Creating container $STATE_CONTAINER if it doesn't exist..."
          az storage container create \
            --name "$STATE_CONTAINER" \
            --account-name "$STORAGE_ACCOUNT_NAME" \
            --auth-mode login

      - name: Terraform Init
        run: |
          # Format storage account name consistently with creation step
          STORAGE_ACCOUNT_NAME=$(echo "$STATE_SA" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]//g' | cut -c1-24)
          
          terraform init \
            -backend-config="storage_account_name=$STORAGE_ACCOUNT_NAME" \
            -backend-config="container_name=$STATE_CONTAINER" \
            -backend-config="key=$STATE_KEY" \
            -backend-config="resource_group_name=$STATE_RG" \
            -backend-config="subscription_id=$ARM_SUBSCRIPTION_ID" \
            -backend-config="tenant_id=$ARM_TENANT_ID" \
            -backend-config="client_id=$ARM_CLIENT_ID" \
            -backend-config="client_secret=$ARM_CLIENT_SECRET"

      - name: Terraform Plan
        run: |
          # Get absolute path to config file since we're in the environments/prod directory
          CONFIG_PATH="$(pwd)/../../config/infrastructure.tfvars"
          echo "Using config file at: $CONFIG_PATH"
          
          # Verify config file exists
          if [ ! -f "$CONFIG_PATH" ]; then
            echo "Error: Config file not found at $CONFIG_PATH"
            ls -la "$(pwd)/../../config/"
            exit 1
          fi
          
          terraform plan \
            -var-file="$CONFIG_PATH" \
            -out=tfplan

      - name: Upload Plan
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: ./terraform/environments/prod/tfplan
          retention-days: 1

  apply:
    name: 'Apply Terraform Changes'
    needs: plan
    runs-on: ubuntu-latest
    environment: production
    if: github.ref == 'refs/heads/master'
    
    defaults:
      run:
        shell: bash
        working-directory: ./terraform/environments/prod

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.7"

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: |
            {
              "clientId": "${{ secrets.AZURE_CLIENT_ID }}",
              "clientSecret": "${{ secrets.AZURE_CLIENT_SECRET }}",
              "subscriptionId": "${{ secrets.AZURE_SUBSCRIPTION_ID }}",
              "tenantId": "${{ secrets.AZURE_TENANT_ID }}"
            }

      - name: Download Plan
        uses: actions/download-artifact@v4
        with:
          name: tfplan
          path: ./terraform/environments/prod

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="storage_account_name=$STATE_SA" \
            -backend-config="container_name=$STATE_CONTAINER" \
            -backend-config="key=$STATE_KEY" \
            -backend-config="resource_group_name=$STATE_RG" \
            -backend-config="subscription_id=$ARM_SUBSCRIPTION_ID" \
            -backend-config="tenant_id=$ARM_TENANT_ID" \
            -backend-config="client_id=$ARM_CLIENT_ID" \
            -backend-config="client_secret=$ARM_CLIENT_SECRET"

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
        
      - name: Generate Terraform Documentation
        run: |
          # Install terraform-docs if needed
          curl -Lo ./terraform-docs.tar.gz https://github.com/terraform-docs/terraform-docs/releases/download/v0.16.0/terraform-docs-v0.16.0-$(uname)-amd64.tar.gz
          tar -xzf terraform-docs.tar.gz
          chmod +x terraform-docs
          ./terraform-docs markdown table --output-file README.md --output-mode replace ./

      - name: Update Documentation in Repository
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "docs: Update Terraform documentation [skip ci]"
          file_pattern: terraform/README.md 