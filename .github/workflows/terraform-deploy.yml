name: Terraform Infrastructure Management

on:
  push:
    branches: [ main, master ]
    paths:
      - 'terraform/**'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'terraform/**'
  # Allow manual triggering of workflow
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
      apply:
        description: 'Apply changes'
        required: true
        default: false
        type: boolean

# Add permissions block for GitHub token
permissions:
  contents: write
  pull-requests: write
  security-events: write
  id-token: write

env:
  # Authentication variables
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  
  # Terraform backend configuration
  TF_STORAGE_ACCOUNT_NAME: "mvpopstfstate"
  TF_CONTAINER_NAME: "tfstate"
  
  # Terraform version
  TF_VERSION: "1.5.7"
  
  # Dynamic environment variables
  TF_VAR_environment: ${{ github.event.inputs.environment || 'production' }}
  TF_VAR_vm_ssh_public_key: ${{ secrets.TF_VAR_VM_SSH_PUBLIC_KEY }}
  TF_VAR_location: "swedencentral"
  TF_VAR_resource_group_name: "JP-test"

jobs:
  verify-credentials:
    name: 'Verify Azure Credentials'
    runs-on: ubuntu-latest
    steps:
      - name: Verify Azure Environment Variables
        run: |
          if [ -n "$ARM_CLIENT_ID" ]; then
            echo "ARM_CLIENT_ID exists and is set"
            echo "First 4 characters: ${ARM_CLIENT_ID:0:4}..."
          else
            echo "ARM_CLIENT_ID is not set! ❌"
          fi
          
          if [ -n "$ARM_CLIENT_SECRET" ]; then
            echo "ARM_CLIENT_SECRET exists and is set (value masked)"
          else
            echo "ARM_CLIENT_SECRET is not set! ❌"
          fi
          
          if [ -n "$ARM_SUBSCRIPTION_ID" ]; then
            echo "ARM_SUBSCRIPTION_ID exists and is set"
            echo "Value with middle masked: ${ARM_SUBSCRIPTION_ID:0:4}...${ARM_SUBSCRIPTION_ID: -4}"
          else
            echo "ARM_SUBSCRIPTION_ID is not set! ❌"
          fi
          
          if [ -n "$ARM_TENANT_ID" ]; then
            echo "ARM_TENANT_ID exists and is set"
            echo "Value with middle masked: ${ARM_TENANT_ID:0:4}...${ARM_TENANT_ID: -4}"
          else
            echo "ARM_TENANT_ID is not set! ❌"
          fi

  validate:
    name: 'Validate Terraform'
    needs: verify-credentials
    runs-on: ubuntu-latest
    
    # Use the Bash shell
    defaults:
      run:
        shell: bash
        working-directory: ./terraform/environments/prod

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Format
        id: fmt
        run: |
          # First format all files
          terraform fmt -recursive
          # Then check if any files would still need formatting
          terraform fmt -check -recursive
        continue-on-error: true

      - name: Terraform Validate
        id: validate
        run: |
          terraform init -backend=false
          terraform validate -no-color

      - name: Run tfsec
        uses: aquasecurity/tfsec-sarif-action@v0.1.4
        with:
          sarif_file: tfsec.sarif
          working_directory: terraform/environments/prod
          
      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: tfsec.sarif

  plan:
    name: 'Plan Terraform Changes'
    needs: validate
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    defaults:
      run:
        shell: bash
        working-directory: ./terraform/environments/prod

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Verify Azure Credentials for Plan
        run: |
          echo "Using AZURE_SUBSCRIPTION_ID: ${ARM_SUBSCRIPTION_ID:0:4}...${ARM_SUBSCRIPTION_ID: -4}"
          echo "Using AZURE_TENANT_ID: ${ARM_TENANT_ID:0:4}...${ARM_TENANT_ID: -4}"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: '{"clientId":"${{ secrets.AZURE_CLIENT_ID }}","clientSecret":"${{ secrets.AZURE_CLIENT_SECRET }}","subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.AZURE_TENANT_ID }}"}'

      - name: Create Storage for Terraform State
        uses: azure/CLI@v1
        with:
          azcliversion: 2.70.0
          inlineScript: |
            # Set default values
            STATE_RG="tf-state-rg-mvpops"
            LOCATION="swedencentral"
            
            echo "Using STATE_RG: $STATE_RG"
            echo "Using LOCATION: $LOCATION"
            
            # List current resource groups to verify access
            echo "Listing resource groups to verify access..."
            az group list --output table
            
            # Create resource group if it doesn't exist
            echo "Creating resource group $STATE_RG in $LOCATION..."
            az group create \
              --name "$STATE_RG" \
              --location "$LOCATION" \
              --tags ManagedBy=Terraform Team=Platform \
              --only-show-errors
            
            if [ $? -ne 0 ]; then
              echo "Failed to create resource group"
              exit 1
            fi
            
            # Create storage account if it doesn't exist
            echo "Creating storage account ${{ env.TF_STORAGE_ACCOUNT_NAME }}..."
            az storage account create \
              --name ${{ env.TF_STORAGE_ACCOUNT_NAME }} \
              --resource-group "$STATE_RG" \
              --location "$LOCATION" \
              --sku Standard_LRS \
              --encryption-services blob \
              --kind StorageV2 \
              --allow-blob-public-access false \
              --min-tls-version TLS1_2 \
              --only-show-errors
              
            if [ $? -ne 0 ]; then
              echo "Failed to create storage account"
              exit 1
            fi
              
            # Get storage account key
            echo "Getting storage account key..."
            ACCOUNT_KEY=$(az storage account keys list \
              --resource-group "$STATE_RG" \
              --account-name ${{ env.TF_STORAGE_ACCOUNT_NAME }} \
              --query '[0].value' -o tsv)
              
            if [ -z "$ACCOUNT_KEY" ]; then
              echo "Failed to get storage account key"
              exit 1
            fi
              
            # Create container if it doesn't exist
            echo "Creating storage container ${{ env.TF_CONTAINER_NAME }}..."
            az storage container create \
              --name ${{ env.TF_CONTAINER_NAME }} \
              --account-name ${{ env.TF_STORAGE_ACCOUNT_NAME }} \
              --account-key "$ACCOUNT_KEY" \
              --only-show-errors
              
            if [ $? -ne 0 ]; then
              echo "Failed to create storage container"
              exit 1
            fi
            
            echo "Successfully created all required resources"

      - name: Terraform Init
        id: init
        run: |
          # Use the same hardcoded value as in the Azure CLI step
          STATE_RG="tf-state-rg-mvpops"
          echo "Using state resource group: $STATE_RG"
          
          # Initialize Terraform
          terraform init \
            -backend-config="resource_group_name=$STATE_RG" \
            -backend-config="storage_account_name=${{ env.TF_STORAGE_ACCOUNT_NAME }}" \
            -backend-config="container_name=${{ env.TF_CONTAINER_NAME }}" \
            -backend-config="key=terraform.tfstate"
            
          # Verify initialization was successful
          if [ $? -ne 0 ]; then
            echo "Terraform initialization failed"
            exit 1
          fi
          
          echo "Terraform initialization successful"

      - name: Import Existing Resource Group
        run: |
          # Try to get the resource from state first
          RESOURCE_IN_STATE=$(terraform state list 2>/dev/null | grep -q "azurerm_resource_group.vm_rg" && echo "true" || echo "false")
          echo "Resource in state: $RESOURCE_IN_STATE"
          
          # Only attempt import if not in state AND resource exists in Azure
          if [ "$RESOURCE_IN_STATE" = "false" ] && az group show --name ${{ env.TF_VAR_resource_group_name }} &>/dev/null; then
            echo "Importing existing resource group..."
            terraform import azurerm_resource_group.vm_rg "/subscriptions/$ARM_SUBSCRIPTION_ID/resourceGroups/${{ env.TF_VAR_resource_group_name }}" || {
              echo "Import failed, but continuing as resource might already be in state"
            }
          else
            echo "Resource group either already in Terraform state or doesn't exist, skipping import"
          fi

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -no-color -out=tfplan
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          TF_VAR_vm_ssh_public_key: ${{ secrets.TF_VAR_VM_SSH_PUBLIC_KEY }}
          TF_VAR_location: "swedencentral"
          TF_VAR_resource_group_name: "JP-test"

      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: terraform/environments/prod/tfplan
          retention-days: 5
          if-no-files-found: warn
          compression-level: 6
          overwrite: false
          include-hidden-files: false

      - name: Comment Plan on PR
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const output = require('child_process').execSync('cd terraform/environments/prod && terraform show -no-color tfplan').toString();
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '## Terraform Plan Output\n```terraform\n' + output + '\n```'
            });

  apply:
    name: 'Apply Terraform Changes'
    needs: plan
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}
    if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.apply == 'true')
    
    defaults:
      run:
        shell: bash
        working-directory: ./terraform/environments/prod

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Verify Azure Credentials for Apply
        run: |
          echo "Using AZURE_SUBSCRIPTION_ID: ${ARM_SUBSCRIPTION_ID:0:4}...${ARM_SUBSCRIPTION_ID: -4}"
          echo "Using AZURE_TENANT_ID: ${ARM_TENANT_ID:0:4}...${ARM_TENANT_ID: -4}"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: '{"clientId":"${{ secrets.AZURE_CLIENT_ID }}","clientSecret":"${{ secrets.AZURE_CLIENT_SECRET }}","subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.AZURE_TENANT_ID }}"}'

      - name: Download Terraform Plan
        uses: actions/download-artifact@v4
        with:
          name: terraform-plan
          path: terraform/environments/prod
          
      - name: Terraform Init
        id: init
        run: |
          # Use the same hardcoded value as in the Azure CLI step
          STATE_RG="tf-state-rg-mvpops"
          echo "Using state resource group: $STATE_RG"
          
          terraform init \
            -backend-config="resource_group_name=$STATE_RG" \
            -backend-config="storage_account_name=${{ env.TF_STORAGE_ACCOUNT_NAME }}" \
            -backend-config="container_name=${{ env.TF_CONTAINER_NAME }}" \
            -backend-config="key=terraform.tfstate"

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
        
      - name: Generate Terraform Documentation
        run: |
          # Install terraform-docs if needed
          curl -Lo ./terraform-docs.tar.gz https://github.com/terraform-docs/terraform-docs/releases/download/v0.16.0/terraform-docs-v0.16.0-$(uname)-amd64.tar.gz
          tar -xzf terraform-docs.tar.gz
          chmod +x terraform-docs
          ./terraform-docs markdown table --output-file README.md --output-mode replace ./

      - name: Update Documentation in Repository
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "docs: Update Terraform documentation [skip ci]"
          file_pattern: terraform/README.md 