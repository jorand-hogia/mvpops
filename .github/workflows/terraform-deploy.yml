name: 'Terraform Deploy'

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

# Update permissions block to remove unnecessary permissions
permissions:
  contents: read
  actions: read
  id-token: write
  pull-requests: write

env:
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  TF_VAR_vm_ssh_public_key: ${{ secrets.TF_VAR_VM_SSH_PUBLIC_KEY }}
  STATE_SA: ${{ vars.STATE_SA }}
  STATE_CONTAINER: ${{ secrets.STATE_CONTAINER }}
  STATE_KEY: ${{ secrets.STATE_KEY }}
  STATE_RG: ${{ secrets.STATE_RG }}

jobs:
  verify-credentials:
    name: 'Verify Azure Credentials'
    runs-on: ubuntu-latest
    steps:
      - name: Verify Azure Environment Variables
        run: |
          if [ -n "$ARM_CLIENT_ID" ]; then
            echo "ARM_CLIENT_ID exists and is set"
            echo "First 4 characters: ${ARM_CLIENT_ID:0:4}..."
          else
            echo "ARM_CLIENT_ID is not set! ❌"
          fi
          
          if [ -n "$ARM_CLIENT_SECRET" ]; then
            echo "ARM_CLIENT_SECRET exists and is set (value masked)"
          else
            echo "ARM_CLIENT_SECRET is not set! ❌"
          fi
          
          if [ -n "$ARM_SUBSCRIPTION_ID" ]; then
            echo "ARM_SUBSCRIPTION_ID exists and is set"
            echo "Value with middle masked: ${ARM_SUBSCRIPTION_ID:0:4}...${ARM_SUBSCRIPTION_ID: -4}"
          else
            echo "ARM_SUBSCRIPTION_ID is not set! ❌"
          fi
          
          if [ -n "$ARM_TENANT_ID" ]; then
            echo "ARM_TENANT_ID exists and is set"
            echo "Value with middle masked: ${ARM_TENANT_ID:0:4}...${ARM_TENANT_ID: -4}"
          else
            echo "ARM_TENANT_ID is not set! ❌"
          fi

  validate:
    name: 'Validate Terraform'
    needs: verify-credentials
    runs-on: ubuntu-latest
    
    # Use the Bash shell
    defaults:
      run:
        shell: bash
        working-directory: ./terraform/environments/prod

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.7"

      - name: Terraform Format
        id: fmt
        run: |
          # First format all files
          terraform fmt -recursive
          # Then check if any files would still need formatting
          terraform fmt -check -recursive
        continue-on-error: true

      - name: Terraform Validate
        id: validate
        run: |
          terraform init -backend=false
          terraform validate -no-color

  plan:
    name: 'Plan Terraform Changes'
    needs: validate
    runs-on: ubuntu-latest
    environment: production
    
    defaults:
      run:
        shell: bash
        working-directory: ./terraform/environments/prod

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          lfs: true

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.7"

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: |
            {
              "clientId": "${{ secrets.AZURE_CLIENT_ID }}",
              "clientSecret": "${{ secrets.AZURE_CLIENT_SECRET }}",
              "subscriptionId": "${{ secrets.AZURE_SUBSCRIPTION_ID }}",
              "tenantId": "${{ secrets.AZURE_TENANT_ID }}"
            }

      - name: Create Azure Storage for Terraform State
        run: |
          # Create resource group if it doesn't exist
          echo "Creating resource group $STATE_RG if it doesn't exist..."
          az group create \
            --name "$STATE_RG" \
            --location "swedencentral" \
            --tags Environment=Production Service=Terraform team=Platform

          # Format storage account name
          STORAGE_ACCOUNT_NAME=$(echo "$STATE_SA" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]//g' | cut -c1-24)
          echo "Using storage account name: $STORAGE_ACCOUNT_NAME"

          # Validate storage account name
          if [ -z "$STORAGE_ACCOUNT_NAME" ]; then
            echo "Error: Storage account name is empty"
            echo "Original value: $STATE_SA"
            exit 1
          fi

          if [[ ! $STORAGE_ACCOUNT_NAME =~ ^[a-z0-9]{3,24}$ ]]; then
            echo "Error: Storage account name must be between 3 and 24 characters and contain only lowercase letters and numbers"
            echo "Got: $STORAGE_ACCOUNT_NAME"
            echo "Original value: $STATE_SA"
            exit 1
          fi

          # Debug information
          echo "Debug information:"
          echo "STATE_SA: $STATE_SA"
          echo "STORAGE_ACCOUNT_NAME: $STORAGE_ACCOUNT_NAME"
          echo "STATE_CONTAINER: $STATE_CONTAINER"
          echo "STATE_KEY: $STATE_KEY"
          echo "STATE_RG: $STATE_RG"

          # Check if storage account exists first
          ACCOUNT_EXISTS=$(az storage account check-name --name "$STORAGE_ACCOUNT_NAME" --query "nameAvailable" -o tsv)
          
          if [ "$ACCOUNT_EXISTS" = "false" ]; then
            echo "Storage account $STORAGE_ACCOUNT_NAME already exists, using existing account"
            
            # Try to get information about the account to verify access
            echo "Checking access to existing storage account..."
            az storage account show --name "$STORAGE_ACCOUNT_NAME" --resource-group "$STATE_RG" || {
              echo "Warning: Cannot access existing storage account. It may exist but in a different resource group or subscription."
              echo "Will still try to use it for Terraform state if it's accessible."
            }
          else
            # Create storage account if it doesn't exist
            echo "Creating storage account $STORAGE_ACCOUNT_NAME..."
            az storage account create \
              --name "$STORAGE_ACCOUNT_NAME" \
              --resource-group "$STATE_RG" \
              --location "swedencentral" \
              --sku "Standard_LRS" \
              --encryption-services blob \
              --min-tls-version "TLS1_2" \
              --allow-blob-public-access false
          fi
          
          # Get storage account key
          STORAGE_ACCOUNT_KEY=$(az storage account keys list --account-name "$STORAGE_ACCOUNT_NAME" --resource-group "$STATE_RG" --query "[0].value" -o tsv)

          # Check if container exists before creating it
          echo "Checking if container $STATE_CONTAINER exists..."
          CONTAINER_EXISTS=$(az storage container exists --name "$STATE_CONTAINER" --account-name "$STORAGE_ACCOUNT_NAME" --auth-mode key --account-key "$STORAGE_ACCOUNT_KEY" --query "exists" -o tsv)
          
          if [ "$CONTAINER_EXISTS" = "true" ]; then
            echo "Container $STATE_CONTAINER already exists, using existing container"
          else
            # Create container if it doesn't exist
            echo "Creating container $STATE_CONTAINER..."
            az storage container create \
              --name "$STATE_CONTAINER" \
              --account-name "$STORAGE_ACCOUNT_NAME" \
              --auth-mode key \
              --account-key "$STORAGE_ACCOUNT_KEY"
          fi
          
          # Check if there are any existing lock files that need to be removed
          echo "Checking for stale lock files..."
          if az storage blob exists --container-name "$STATE_CONTAINER" --name "${STATE_KEY}.lock" --account-name "$STORAGE_ACCOUNT_NAME" --auth-mode key --account-key "$STORAGE_ACCOUNT_KEY" --query "exists" -o tsv | grep -q "true"; then
            echo "Lock file exists for state. This might be a stale lock from a previous run."
            echo "Lock details:"
            az storage blob show --container-name "$STATE_CONTAINER" --name "${STATE_KEY}.lock" --account-name "$STORAGE_ACCOUNT_NAME" --auth-mode key --account-key "$STORAGE_ACCOUNT_KEY" --query "{lastModified:properties.lastModified, size:properties.contentLength}" -o json
          
            # Uncomment the line below to automatically remove stale locks (be careful with this in production)
            # az storage blob delete --container-name "$STATE_CONTAINER" --name "${STATE_KEY}.lock" --account-name "$STORAGE_ACCOUNT_NAME" --auth-mode key --account-key "$STORAGE_ACCOUNT_KEY"
            # echo "Lock file removed. If this was a mistake, the workflow may fail if another process is currently using the state file."
          else
            echo "No lock file found for state."
          fi

      - name: Terraform Init
        run: |
          # Format storage account name for consistency
          STORAGE_ACCOUNT_NAME=$(echo "$STATE_SA" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]//g' | cut -c1-24)
          
          # Debug output right before terraform init
          echo "Debug right before terraform init:"
          echo "STORAGE_ACCOUNT_NAME: $STORAGE_ACCOUNT_NAME"
          echo "STATE_SA original value: $STATE_SA"
          
          # Use a temporary hardcoded name for testing
          # Comment out the line below after testing is complete
          # STORAGE_ACCOUNT_NAME="mvpopstfstate"
          # echo "Using hardcoded storage account name for testing: $STORAGE_ACCOUNT_NAME"
          
          terraform init \
            -backend-config="storage_account_name=$STORAGE_ACCOUNT_NAME" \
            -backend-config="container_name=$STATE_CONTAINER" \
            -backend-config="key=$STATE_KEY" \
            -backend-config="resource_group_name=$STATE_RG" \
            -backend-config="subscription_id=$ARM_SUBSCRIPTION_ID" \
            -backend-config="tenant_id=$ARM_TENANT_ID" \
            -backend-config="client_id=$ARM_CLIENT_ID" \
            -backend-config="client_secret=$ARM_CLIENT_SECRET"

      - name: Terraform Plan
        run: |
          # Debug repository structure
          echo "Workspace directory structure:"
          cd $GITHUB_WORKSPACE
          ls -R terraform/
          
          # Use relative path from workspace root
          CONFIG_PATH="terraform/config/infrastructure.tfvars"
          echo "Using config file at: $CONFIG_PATH"
          
          # Format storage account name consistently
          STORAGE_ACCOUNT_NAME=$(echo "$STATE_SA" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]//g' | cut -c1-24)
          
          # Verify config file exists
          if [ ! -f "$CONFIG_PATH" ]; then
            echo "Error: Config file not found at $CONFIG_PATH"
            echo "Current directory: $(pwd)"
            echo "GITHUB_WORKSPACE: $GITHUB_WORKSPACE"
            echo "Directory contents of terraform/config:"
            ls -la "terraform/config" || echo "Config directory not found"
            exit 1
          fi
          
          # Check if state file exists in Azure Storage
          echo "Checking if state file exists in Azure Storage..."
          # Get the storage account key
          STORAGE_ACCOUNT_KEY=$(az storage account keys list --account-name "$STORAGE_ACCOUNT_NAME" --resource-group "$STATE_RG" --query "[0].value" -o tsv)
          
          if az storage blob exists --container-name "$STATE_CONTAINER" --name "$STATE_KEY" --account-name "$STORAGE_ACCOUNT_NAME" --auth-mode key --account-key "$STORAGE_ACCOUNT_KEY" --query "exists" -o tsv | grep -q "true"; then
            echo "State file exists in Azure Storage. Attempting to download for inspection..."
            # Create a temp directory
            TEMP_DIR=$(mktemp -d)
            # Download the state file
            az storage blob download --container-name "$STATE_CONTAINER" --name "$STATE_KEY" --file "$TEMP_DIR/terraform.tfstate" --account-name "$STORAGE_ACCOUNT_NAME" --auth-mode key --account-key "$STORAGE_ACCOUNT_KEY"
            # Show summary of state file
            echo "State file summary:"
            cat "$TEMP_DIR/terraform.tfstate" | jq 'del(.resources[].instances[].attributes)' || echo "Could not parse state file with jq"
            # Check for existing locks
            echo "Checking for state locks..."
            az storage blob exists --container-name "$STATE_CONTAINER" --name "${STATE_KEY}.lock" --account-name "$STORAGE_ACCOUNT_NAME" --auth-mode key --account-key "$STORAGE_ACCOUNT_KEY" --query "exists" -o tsv
            if [ $? -eq 0 ]; then
              echo "Lock file exists for state. Getting details..."
              az storage blob download --container-name "$STATE_CONTAINER" --name "${STATE_KEY}.lock" --file "$TEMP_DIR/terraform.tfstate.lock" --account-name "$STORAGE_ACCOUNT_NAME" --auth-mode key --account-key "$STORAGE_ACCOUNT_KEY"
              cat "$TEMP_DIR/terraform.tfstate.lock" || echo "Could not read lock file"
              echo "Consider removing the lock file if no Terraform operations are currently running."
            else
              echo "No lock file found for state."
            fi
            # Clean up
            rm -rf "$TEMP_DIR"
          else
            echo "State file does not exist yet in Azure Storage, or current identity lacks permission to check."
            echo "Will proceed with initialization which should be able to detect an existing state file if present."
          fi
          
          # Verify backend configuration
          echo "Verifying backend configuration..."
          terraform init -backend=false
          
          # Return to working directory and run plan
          cd terraform/environments/prod
          echo "Current directory before plan: $(pwd)"
          echo "Verifying config file path..."
          ls -la ../../config/infrastructure.tfvars || echo "Config file not found at ../../config/infrastructure.tfvars"
          
          # Initialize terraform first
          echo "Initializing Terraform..."
          
          # Debug output right before second terraform init
          echo "Debug right before second terraform init:"
          # Re-set STORAGE_ACCOUNT_NAME since we changed directories
          STORAGE_ACCOUNT_NAME=$(echo "$STATE_SA" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]//g' | cut -c1-24)
          echo "STORAGE_ACCOUNT_NAME: $STORAGE_ACCOUNT_NAME"
          echo "STATE_SA original value: $STATE_SA"
          
          # Ensure storage account name is not empty
          if [ -z "$STORAGE_ACCOUNT_NAME" ]; then
            echo "Error: STORAGE_ACCOUNT_NAME is empty after directory change"
            echo "STATE_SA: $STATE_SA"
            exit 1
          fi
          
          # Get storage account key for Terraform backend
          STORAGE_ACCOUNT_KEY=$(az storage account keys list --account-name "$STORAGE_ACCOUNT_NAME" --resource-group "$STATE_RG" --query "[0].value" -o tsv)
          
          # Export as environment variables for Terraform instead of CLI args
          export ARM_ACCESS_KEY="$STORAGE_ACCOUNT_KEY"
          
          # Check for existing lock and remove if necessary
          echo "Checking for existing state lock before initialization..."
          if az storage blob exists --container-name "$STATE_CONTAINER" --name "${STATE_KEY}.lock" --account-name "$STORAGE_ACCOUNT_NAME" --auth-mode key --account-key "$STORAGE_ACCOUNT_KEY" --query "exists" -o tsv | grep -q "true"; then
            echo "WARNING: Lock file exists for state. This might be a stale lock."
            echo "Lock details:"
            az storage blob show --container-name "$STATE_CONTAINER" --name "${STATE_KEY}.lock" --account-name "$STORAGE_ACCOUNT_NAME" --auth-mode key --account-key "$STORAGE_ACCOUNT_KEY" --query "{lastModified:properties.lastModified, size:properties.contentLength}" -o json
            
            # We will force unlock if the lock is older than 1 hour
            LOCK_DATE=$(az storage blob show --container-name "$STATE_CONTAINER" --name "${STATE_KEY}.lock" --account-name "$STORAGE_ACCOUNT_NAME" --auth-mode key --account-key "$STORAGE_ACCOUNT_KEY" --query "properties.lastModified" -o tsv)
            CURRENT_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
            echo "Lock date: $LOCK_DATE"
            echo "Current date: $CURRENT_DATE"
            
            # Convert dates to seconds since epoch for comparison
            LOCK_SECONDS=$(date -d "$LOCK_DATE" +%s)
            CURRENT_SECONDS=$(date -d "$CURRENT_DATE" +%s)
            DIFF_SECONDS=$((CURRENT_SECONDS - LOCK_SECONDS))
            
            if [ $DIFF_SECONDS -gt 3600 ]; then
              echo "Lock is older than 1 hour, forcing removal to prevent workflow stalls."
              az storage blob delete --container-name "$STATE_CONTAINER" --name "${STATE_KEY}.lock" --account-name "$STORAGE_ACCOUNT_NAME" --auth-mode key --account-key "$STORAGE_ACCOUNT_KEY"
              echo "Lock file removed."
            else
              echo "Lock is recent (less than 1 hour old). It might be active. Will try to proceed anyway."
            fi
          else
            echo "No lock file found, proceeding with init."
          fi
          
          terraform init \
            -backend-config="storage_account_name=$STORAGE_ACCOUNT_NAME" \
            -backend-config="container_name=$STATE_CONTAINER" \
            -backend-config="key=$STATE_KEY" \
            -backend-config="resource_group_name=$STATE_RG" \
            -force-unlock=true \
            -reconfigure

          # Check for and remove any existing locks
          echo "Checking for existing state lock..."
          LOCK_ID=$(terraform state list 2>/dev/null | grep -o 'lock-[0-9a-f-]*' | head -n1 || echo "")
          if [ -n "$LOCK_ID" ]; then
            echo "Found lock ID: $LOCK_ID"
            terraform force-unlock -force "$LOCK_ID"
          else
            echo "No existing lock found via terraform state list"
          fi

          # Run plan with lock timeout
          terraform plan \
            -var-file="../../config/infrastructure.tfvars" \
            -lock-timeout=5m \
            -out=tfplan

      - name: Upload Plan
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: ./terraform/environments/prod/tfplan
          retention-days: 1

  apply:
    name: 'Apply Terraform Changes'
    needs: plan
    runs-on: ubuntu-latest
    environment: production
    if: github.ref == 'refs/heads/master'
    
    defaults:
      run:
        shell: bash
        working-directory: ./terraform/environments/prod

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.7"

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: |
            {
              "clientId": "${{ secrets.AZURE_CLIENT_ID }}",
              "clientSecret": "${{ secrets.AZURE_CLIENT_SECRET }}",
              "subscriptionId": "${{ secrets.AZURE_SUBSCRIPTION_ID }}",
              "tenantId": "${{ secrets.AZURE_TENANT_ID }}"
            }

      - name: Download Plan
        uses: actions/download-artifact@v4
        with:
          name: tfplan
          path: ./terraform/environments/prod

      - name: Terraform Init
        run: |
          # Format storage account name for consistency
          STORAGE_ACCOUNT_NAME=$(echo "$STATE_SA" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]//g' | cut -c1-24)
          
          # Debug output right before terraform init
          echo "Debug in Apply step:"
          echo "STORAGE_ACCOUNT_NAME: $STORAGE_ACCOUNT_NAME"
          echo "STATE_SA original value: $STATE_SA"
          
          # Ensure storage account name is not empty
          if [ -z "$STORAGE_ACCOUNT_NAME" ]; then
            echo "Error: STORAGE_ACCOUNT_NAME is empty in Apply step"
            echo "STATE_SA: $STATE_SA"
            exit 1
          fi
          
          # Get storage account key for Terraform backend
          STORAGE_ACCOUNT_KEY=$(az storage account keys list --account-name "$STORAGE_ACCOUNT_NAME" --resource-group "$STATE_RG" --query "[0].value" -o tsv)
          
          # Export as environment variables for Terraform instead of CLI args
          export ARM_ACCESS_KEY="$STORAGE_ACCOUNT_KEY"
          
          # Check for existing lock and remove if necessary
          echo "Checking for existing state lock before initialization..."
          if az storage blob exists --container-name "$STATE_CONTAINER" --name "${STATE_KEY}.lock" --account-name "$STORAGE_ACCOUNT_NAME" --auth-mode key --account-key "$STORAGE_ACCOUNT_KEY" --query "exists" -o tsv | grep -q "true"; then
            echo "WARNING: Lock file exists for state. This might be a stale lock."
            echo "Lock details:"
            az storage blob show --container-name "$STATE_CONTAINER" --name "${STATE_KEY}.lock" --account-name "$STORAGE_ACCOUNT_NAME" --auth-mode key --account-key "$STORAGE_ACCOUNT_KEY" --query "{lastModified:properties.lastModified, size:properties.contentLength}" -o json
            
            # We will force unlock if the lock is older than 1 hour
            LOCK_DATE=$(az storage blob show --container-name "$STATE_CONTAINER" --name "${STATE_KEY}.lock" --account-name "$STORAGE_ACCOUNT_NAME" --auth-mode key --account-key "$STORAGE_ACCOUNT_KEY" --query "properties.lastModified" -o tsv)
            CURRENT_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
            echo "Lock date: $LOCK_DATE"
            echo "Current date: $CURRENT_DATE"
            
            # Convert dates to seconds since epoch for comparison
            LOCK_SECONDS=$(date -d "$LOCK_DATE" +%s)
            CURRENT_SECONDS=$(date -d "$CURRENT_DATE" +%s)
            DIFF_SECONDS=$((CURRENT_SECONDS - LOCK_SECONDS))
            
            if [ $DIFF_SECONDS -gt 3600 ]; then
              echo "Lock is older than 1 hour, forcing removal to prevent workflow stalls."
              az storage blob delete --container-name "$STATE_CONTAINER" --name "${STATE_KEY}.lock" --account-name "$STORAGE_ACCOUNT_NAME" --auth-mode key --account-key "$STORAGE_ACCOUNT_KEY"
              echo "Lock file removed."
            else
              echo "Lock is recent (less than 1 hour old). It might be active. Will try to proceed anyway."
            fi
          else
            echo "No lock file found, proceeding with init."
          fi
          
          terraform init \
            -backend-config="storage_account_name=$STORAGE_ACCOUNT_NAME" \
            -backend-config="container_name=$STATE_CONTAINER" \
            -backend-config="key=$STATE_KEY" \
            -backend-config="resource_group_name=$STATE_RG" \
            -force-unlock=true \
            -reconfigure

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
        
      - name: Generate Terraform Documentation
        run: |
          # Install terraform-docs if needed
          curl -Lo ./terraform-docs.tar.gz https://github.com/terraform-docs/terraform-docs/releases/download/v0.16.0/terraform-docs-v0.16.0-$(uname)-amd64.tar.gz
          tar -xzf terraform-docs.tar.gz
          chmod +x terraform-docs
          ./terraform-docs markdown table --output-file README.md --output-mode replace ./

      - name: Update Documentation in Repository
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "docs: Update Terraform documentation [skip ci]"
          file_pattern: terraform/README.md 