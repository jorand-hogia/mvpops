name: 'Terraform Deploy'

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

# Update permissions block to remove unnecessary permissions
permissions:
  contents: read
  actions: read
  id-token: write
  pull-requests: write

env:
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  TF_VAR_vm_ssh_public_key: ${{ secrets.TF_VAR_VM_SSH_PUBLIC_KEY }}
  STATE_SA: ${{ vars.STATE_SA }}
  STATE_CONTAINER: ${{ secrets.STATE_CONTAINER }}
  STATE_KEY: ${{ secrets.STATE_KEY }}
  STATE_RG: ${{ secrets.STATE_RG }}
  # Add lock timeout environment variable
  TF_LOCK_TIMEOUT: "300s"

jobs:
  verify-credentials:
    name: 'Verify Azure Credentials'
    runs-on: ubuntu-latest
    steps:
      - name: Verify Azure Environment Variables
        run: |
          if [ -n "$ARM_CLIENT_ID" ]; then
            echo "ARM_CLIENT_ID exists and is set"
            echo "First 4 characters: ${ARM_CLIENT_ID:0:4}..."
          else
            echo "ARM_CLIENT_ID is not set! ❌"
          fi
          
          if [ -n "$ARM_CLIENT_SECRET" ]; then
            echo "ARM_CLIENT_SECRET exists and is set (value masked)"
          else
            echo "ARM_CLIENT_SECRET is not set! ❌"
          fi
          
          if [ -n "$ARM_SUBSCRIPTION_ID" ]; then
            echo "ARM_SUBSCRIPTION_ID exists and is set"
            echo "Value with middle masked: ${ARM_SUBSCRIPTION_ID:0:4}...${ARM_SUBSCRIPTION_ID: -4}"
          else
            echo "ARM_SUBSCRIPTION_ID is not set! ❌"
          fi
          
          if [ -n "$ARM_TENANT_ID" ]; then
            echo "ARM_TENANT_ID exists and is set"
            echo "Value with middle masked: ${ARM_TENANT_ID:0:4}...${ARM_TENANT_ID: -4}"
          else
            echo "ARM_TENANT_ID is not set! ❌"
          fi

  validate:
    name: 'Validate Terraform'
    needs: verify-credentials
    runs-on: ubuntu-latest
    
    # Use the Bash shell
    defaults:
      run:
        shell: bash
        working-directory: ./terraform/environments/prod

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.7"

      - name: Terraform Format
        id: fmt
        run: |
          # First format all files
          terraform fmt -recursive
          # Then check if any files would still need formatting
          terraform fmt -check -recursive
        continue-on-error: true

      - name: Terraform Validate
        id: validate
        run: |
          terraform init -backend=false
          terraform validate -no-color

  # Add a new job to clear any existing locks before running the plan
  clear-locks:
    name: 'Clear Terraform State Locks'
    needs: validate
    runs-on: ubuntu-latest
    environment: production
    
    defaults:
      run:
        shell: bash
        working-directory: ./terraform/environments/prod
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: |
            {
              "clientId": "${{ secrets.AZURE_CLIENT_ID }}",
              "clientSecret": "${{ secrets.AZURE_CLIENT_SECRET }}",
              "subscriptionId": "${{ secrets.AZURE_SUBSCRIPTION_ID }}",
              "tenantId": "${{ secrets.AZURE_TENANT_ID }}"
            }
      
      - name: Clear existing state locks
        run: |
          # Format storage account name
          STORAGE_ACCOUNT_NAME=$(echo "$STATE_SA" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]//g' | cut -c1-24)
          STORAGE_ACCOUNT_KEY=$(az storage account keys list --account-name "$STORAGE_ACCOUNT_NAME" --resource-group "$STATE_RG" --query "[0].value" -o tsv)
          
          # Check if lock file exists
          echo "Checking for lock file..."
          LOCK_EXISTS=$(az storage blob exists --container-name "$STATE_CONTAINER" --name "${STATE_KEY}.lock" --account-name "$STORAGE_ACCOUNT_NAME" --auth-mode key --account-key "$STORAGE_ACCOUNT_KEY" --query "exists" -o tsv)
          
          if [ "$LOCK_EXISTS" = "true" ]; then
            echo "Lock file exists! Getting metadata..."
            LOCK_METADATA=$(az storage blob show --container-name "$STATE_CONTAINER" --name "${STATE_KEY}.lock" --account-name "$STORAGE_ACCOUNT_NAME" --auth-mode key --account-key "$STORAGE_ACCOUNT_KEY" --query "properties.metadata" -o json)
            LOCK_TIMESTAMP=$(echo "$LOCK_METADATA" | jq -r '.timestamp // empty')
            LOCK_OWNER=$(echo "$LOCK_METADATA" | jq -r '.owner // empty')
            
            echo "Lock is owned by: $LOCK_OWNER"
            echo "Lock was created at: $LOCK_TIMESTAMP"
            
            # Delete the lock
            echo "Deleting lock file..."
            az storage blob delete --container-name "$STATE_CONTAINER" --name "${STATE_KEY}.lock" --account-name "$STORAGE_ACCOUNT_NAME" --auth-mode key --account-key "$STORAGE_ACCOUNT_KEY"
            echo "Lock file deleted successfully!"
          else
            echo "No lock file found in the Azure Storage container."
          fi

  plan:
    name: 'Plan Terraform Changes'
    needs: clear-locks
    runs-on: ubuntu-latest
    environment: production
    
    defaults:
      run:
        shell: bash
        working-directory: ./terraform/environments/prod

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          lfs: true

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.7"

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: |
            {
              "clientId": "${{ secrets.AZURE_CLIENT_ID }}",
              "clientSecret": "${{ secrets.AZURE_CLIENT_SECRET }}",
              "subscriptionId": "${{ secrets.AZURE_SUBSCRIPTION_ID }}",
              "tenantId": "${{ secrets.AZURE_TENANT_ID }}"
            }

      - name: Create Azure Storage for Terraform State
        run: |
          # Create resource group if it doesn't exist
          echo "Creating resource group $STATE_RG if it doesn't exist..."
          az group create \
            --name "$STATE_RG" \
            --location "swedencentral" \
            --tags Environment=Production Service=Terraform team=Platform

          # Format storage account name - improved handling
          STORAGE_ACCOUNT_NAME=$(echo "$STATE_SA" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]//g' | cut -c1-24)
          if [ ${#STORAGE_ACCOUNT_NAME} -lt 3 ]; then
            echo "Error: Storage account name too short after sanitization"
            echo "Original value: $STATE_SA"
            echo "Sanitized value: $STORAGE_ACCOUNT_NAME"
            exit 1
          fi

          # Validate storage account name
          if [ -z "$STORAGE_ACCOUNT_NAME" ]; then
            echo "Error: Storage account name is empty"
            echo "Original value: $STATE_SA"
            exit 1
          fi

          if [[ ! $STORAGE_ACCOUNT_NAME =~ ^[a-z0-9]{3,24}$ ]]; then
            echo "Error: Storage account name must be between 3 and 24 characters and contain only lowercase letters and numbers"
            echo "Got: $STORAGE_ACCOUNT_NAME"
            echo "Original value: $STATE_SA"
            exit 1
          fi

          # Debug information
          echo "Debug information:"
          echo "STATE_SA: $STATE_SA"
          echo "STORAGE_ACCOUNT_NAME: $STORAGE_ACCOUNT_NAME"
          echo "STATE_CONTAINER: $STATE_CONTAINER"
          echo "STATE_KEY: $STATE_KEY"
          echo "STATE_RG: $STATE_RG"

          # Check if storage account exists first
          ACCOUNT_EXISTS=$(az storage account check-name --name "$STORAGE_ACCOUNT_NAME" --query "nameAvailable" -o tsv)
          
          if [ "$ACCOUNT_EXISTS" = "false" ]; then
            echo "Storage account $STORAGE_ACCOUNT_NAME already exists, using existing account"
            
            # Try to get information about the account to verify access
            echo "Checking access to existing storage account..."
            az storage account show --name "$STORAGE_ACCOUNT_NAME" --resource-group "$STATE_RG" || {
              echo "Warning: Cannot access existing storage account. It may exist but in a different resource group or subscription."
              echo "Will still try to use it for Terraform state if it's accessible."
            }
          else
            # Create storage account if it doesn't exist
            echo "Creating storage account $STORAGE_ACCOUNT_NAME..."
            az storage account create \
              --name "$STORAGE_ACCOUNT_NAME" \
              --resource-group "$STATE_RG" \
              --location "swedencentral" \
              --sku "Standard_LRS" \
              --encryption-services blob \
              --min-tls-version "TLS1_2" \
              --allow-blob-public-access false \
              --tags Environment=Production Service=Terraform Purpose=State
          fi
          
          # Get storage account key
          STORAGE_ACCOUNT_KEY=$(az storage account keys list --account-name "$STORAGE_ACCOUNT_NAME" --resource-group "$STATE_RG" --query "[0].value" -o tsv)

          # Check if container exists before creating it
          echo "Checking if container $STATE_CONTAINER exists..."
          CONTAINER_EXISTS=$(az storage container exists --name "$STATE_CONTAINER" --account-name "$STORAGE_ACCOUNT_NAME" --auth-mode key --account-key "$STORAGE_ACCOUNT_KEY" --query "exists" -o tsv)
          
          if [ "$CONTAINER_EXISTS" = "true" ]; then
            echo "Container $STATE_CONTAINER already exists, using existing container"
          else
            # Create container if it doesn't exist
            echo "Creating container $STATE_CONTAINER..."
            az storage container create \
              --name "$STATE_CONTAINER" \
              --account-name "$STORAGE_ACCOUNT_NAME" \
              --auth-mode key \
              --account-key "$STORAGE_ACCOUNT_KEY"
          fi

      - name: Terraform Init
        run: |
          # Format storage account name for consistency
          STORAGE_ACCOUNT_NAME=$(echo "$STATE_SA" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]//g' | cut -c1-24)
          
          terraform init \
            -backend-config="storage_account_name=$STORAGE_ACCOUNT_NAME" \
            -backend-config="container_name=$STATE_CONTAINER" \
            -backend-config="key=$STATE_KEY" \
            -backend-config="resource_group_name=$STATE_RG" \
            -backend-config="subscription_id=$ARM_SUBSCRIPTION_ID" \
            -backend-config="tenant_id=$ARM_TENANT_ID" \
            -backend-config="client_id=$ARM_CLIENT_ID" \
            -backend-config="client_secret=$ARM_CLIENT_SECRET"

      - name: Terraform Plan
        id: plan
        run: |
          # Function to check if lock exists and is stale
          check_lock() {
            local lock_age
            local max_age=300  # 5 minutes in seconds
            
            # Get lock metadata
            LOCK_METADATA=$(az storage blob show --container-name "$STATE_CONTAINER" --name "${STATE_KEY}.lock" --account-name "$STORAGE_ACCOUNT_NAME" --auth-mode key --account-key "$STORAGE_ACCOUNT_KEY" --query "properties.metadata" -o json 2>/dev/null || echo "{}")
            LOCK_TIMESTAMP=$(echo "$LOCK_METADATA" | jq -r '.timestamp // empty')
            
            if [ -n "$LOCK_TIMESTAMP" ]; then
              # Calculate lock age in seconds
              lock_age=$(( $(date +%s) - $(date -d "$LOCK_TIMESTAMP" +%s) ))
              if [ "$lock_age" -gt "$max_age" ]; then
                echo "Found stale lock (age: ${lock_age}s), will remove it"
                return 1
              fi
            fi
            return 0
          }

          # Function to remove lock
          remove_lock() {
            echo "Removing lock file..."
            az storage blob delete --container-name "$STATE_CONTAINER" --name "${STATE_KEY}.lock" --account-name "$STORAGE_ACCOUNT_NAME" --auth-mode key --account-key "$STORAGE_ACCOUNT_KEY" || true
          }

          # Initialize Terraform
          echo "Initializing Terraform..."
          terraform init -no-color

          # Try to run plan with retries
          max_retries=3
          retry_count=0
          while [ $retry_count -lt $max_retries ]; do
            echo "Attempt $((retry_count + 1)) of $max_retries"
            
            # Check for stale locks before each attempt
            if ! check_lock; then
              remove_lock
            fi
            
            # Run terraform plan
            if terraform plan -no-color -out=tfplan -lock-timeout=$TF_LOCK_TIMEOUT; then
              echo "Terraform plan completed successfully"
              break
            else
              retry_count=$((retry_count + 1))
              if [ $retry_count -lt $max_retries ]; then
                echo "Plan failed, waiting before retry..."
                sleep 30
                remove_lock
              else
                echo "All retry attempts failed"
                exit 1
              fi
            fi
          done

      - name: Terraform Apply
        if: github.ref == 'refs/heads/master' && github.event_name == 'push'
        run: terraform apply -auto-approve tfplan -lock-timeout=$TF_LOCK_TIMEOUT

      # Clean up the lock in the "always" block to ensure it runs even if previous steps fail
      - name: Cleanup State Lock
        if: always()
        run: |
          STORAGE_ACCOUNT_NAME=$(echo "$STATE_SA" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]//g' | cut -c1-24)
          STORAGE_ACCOUNT_KEY=$(az storage account keys list --account-name "$STORAGE_ACCOUNT_NAME" --resource-group "$STATE_RG" --query "[0].value" -o tsv)
          
          # Check if our lock still exists
          LOCK_EXISTS=$(az storage blob exists --container-name "$STATE_CONTAINER" --name "${STATE_KEY}.lock" --account-name "$STORAGE_ACCOUNT_NAME" --auth-mode key --account-key "$STORAGE_ACCOUNT_KEY" --query "exists" -o tsv)
          if [ "$LOCK_EXISTS" = "true" ]; then
            # Delete the lock without checking metadata
            echo "Cleaning up any remaining state lock..."
            az storage blob delete --container-name "$STATE_CONTAINER" --name "${STATE_KEY}.lock" --account-name "$STORAGE_ACCOUNT_NAME" --auth-mode key --account-key "$STORAGE_ACCOUNT_KEY"
          fi

      - name: Generate Terraform Documentation
        run: |
          # Install terraform-docs if needed
          curl -Lo ./terraform-docs.tar.gz https://github.com/terraform-docs/terraform-docs/releases/download/v0.16.0/terraform-docs-v0.16.0-$(uname)-amd64.tar.gz
          tar -xzf terraform-docs.tar.gz
          chmod +x terraform-docs
          ./terraform-docs markdown table --output-file README.md --output-mode replace ./

      - name: Update Documentation in Repository
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "docs: Update Terraform documentation [skip ci]"
          file_pattern: terraform/README.md

      - name: Cleanup on failure
        if: always()
        run: |
          # Remove lock file if it exists
          az storage blob delete --container-name "$STATE_CONTAINER" --name "${STATE_KEY}.lock" --account-name "$STORAGE_ACCOUNT_NAME" --auth-mode key --account-key "$STORAGE_ACCOUNT_KEY" || true 